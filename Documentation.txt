Documentation


signalLevel.py
	
	getPacketLoss(bflag_value=5, lflag_value=1470)
		Takes two optional integer values, returns a floating point between 0 and 100 representing the percentage of packets lost.
			bflag_value: Controls the bitrate of the packet transfer in Mbps
			lflag_value: Controls the length of the packet in bytes

	getSignal(essid)
		Takes a string and returns a "Signal" dict containing the beacon strength in dBm and the passed SSID
			essid: Should be something like 'LeaPiNode1'

	getAllSignals()
		Returns a list of dicts from getSignal

	"Signal" Dict:
		Returned by getSignal and getAllSignals, has two fields 'strength' and 'address'
			'strength' is the beacon strength
			'address' is the SSID of the beacon


triangulate.py

	signal_to_distance(signal)
		Takes a negative signal level and returns a positive number corresponding to the estimated relative distance that the signal level represents
			signal: A negative numerical value

	calibrate()
		Brings up the calibration prompt, which will ask the user to stand at node 2 and then node 1 to measure the relative distance between each Raspberry Pi Zero. Returns a tuple containing the relative position (x,y) of node 3 (the top of the triangle) and the relative distance between nodes 2 and 3.
			Returns a tuple: (node_3_x_position, node_3_y_position, distance_2_1)

	triangulate()
		Returns the relative position of the caller and the distance between node 2 and node 1 as a tuple.
			Returns a tuple: x,y,U where U is the distance between node 1 and 2


graph.py

	generate(option)
		Prompts the user to calibrate if calibration has not been done, then give the user a number of options:
			option = 1: Generate an html document containing a graph of all points measured since the last "clear"
				Sets color to the signal level
			option = 2: Recalibrate
				Calls calibrate()
			option = 3: Clear the previously stored points
			option = 4: Quit



